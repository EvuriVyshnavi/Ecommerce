import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

// Define the base API URL. This should match where your backend is running.
const BASE_URL = 'http://localhost:5000'; // Assuming your backend runs on port 5000
const PRODUCTS_URL = '/api/products'; 

// 1. Define the base query function
// This handles setting up headers, fetching, and error handling for all API calls
const baseQuery = fetchBaseQuery({ baseUrl: BASE_URL });

// 2. Create the main API slice using RTK Query
export const apiSlice = createApi({
    // Defines where the state will be stored (e.g., store.getState().api)
    baseQuery,
    // Defines the tag types used for caching and invalidation
    tagTypes: ['Product', 'Order', 'User'], 
    endpoints: (builder) => ({
        // Define endpoints for your application
    }),
});

// Define the Product-specific API endpoints by injecting them into the base apiSlice
export const productsApiSlice = apiSlice.injectEndpoints({
    endpoints: (builder) => ({
        // Endpoint to get all products (GET /api/products)
        getProducts: builder.query({
            query: () => ({
                url: PRODUCTS_URL, // '/api/products'
            }),
            // Keep the data cached for 5 seconds to reduce unnecessary requests
            keepUnusedDataFor: 5, 
        }),
        // Endpoint to get a single product by ID (GET /api/products/:id)
        getProductDetails: builder.query({
            query: (productId) => ({
                url: `${PRODUCTS_URL}/${productId}`,
            }),
            keepUnusedDataFor: 5,
        }),
    }),
});

// We export the hooks generated by RTK Query for use in our components
export const { useGetProductsQuery, useGetProductDetailsQuery } = productsApiSlice;

// Export the base apiSlice just in case other slices want to inject endpoints later
export default apiSlice;
